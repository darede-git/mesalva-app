# frozen_string_literal: true

class NodeModulesController < ApplicationController
  before_action -> { authenticate_permalink_access(%w[admin]) }
  before_action :set_node_module, only: %i[update destroy]

  include AuthorshipConcern
  include PermalinkBuildConcern
  include Cache
  include RemovableEntityRelativesConcern

  def create
    @node_module = NodeModule.new(valid_params.merge(platform_params))
    if @node_module.save
      render_created(@node_module)
    else
      render_unprocessable_entity(@node_module.errors.messages)
    end
  end

  def update
    if @node_module.update(node_module_update_params.merge(platform_params))
      @node_module.sort_relatives(params[:item_ids_order])
      render_ok(@node_module)
    else
      render_unprocessable_entity(@node_module.errors.messages)
    end
  end

  def destroy
    @node_module.destroy
    render_no_content
  end

  private

  def valid_params?
    %i[instructor_uid instructor_type].all? { |attr| params[attr].present? }
  end

  def instructor
    return unless valid_params?

    instructor_type_param.constantize
                         .find_by_uid(params[:instructor_uid])
  end

  def instructor_type_param
    instructor_type = params[:instructor_type]
    return instructor_type if %w[Admin Teacher].include?(instructor_type)
  end

  def set_node_module
    @node_module = NodeModule.find(params[:id])
  end

  def valid_params
    node_module_params.merge(instructor: instructor)
  end

  def node_module_params
    params.permit(:name, :description, :suggested_to, :code, :active, :listed,
                  :pre_requisite, :image, :created_by, :updated_by,
                  :relevancy, :position, :node_module_type, :meta_description,
                  :meta_title, :color_hex, options: {}, node_ids: [], item_ids: [])
  end

  def node_module_update_params
    valid_params.merge(params.permit(node_ids: [],
                                     item_ids: [],
                                     medium_ids: []))
  end

  def platform_params
    return { platform_id: @platform.id } if @platform

    {}
  end
end
