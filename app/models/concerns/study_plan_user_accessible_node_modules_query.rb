# frozen_string_literal: true

module StudyPlanUserAccessibleNodeModulesQuery
  def self.included(base)
    base.extend(StudyPlanUserAccessibleNodeModulesQuery)
  end

  # rubocop:disable Metrics/MethodLength
  def by_user_subjects(user_id, subject_ids)
    query = <<~SQL
      WITH user_accesses AS (
        SELECT
          array_agg(DISTINCT np.node_id) AS list,
          #{ENV['STUDY_PLAN_NODE_MODULE_LIMIT'].to_i} AS node_modules_limit
        FROM
          accesses a
          LEFT JOIN packages p ON p.id = a.package_id
          LEFT JOIN nodes_packages np ON np.package_id = p.id
          LEFT JOIN package_features pf ON p.id = pf.package_id
          LEFT JOIN features f ON pf.feature_id = f.id AND f.slug = 'plano-de-estudos'
        WHERE
          a.active IS TRUE AND
          a.expires_at >= now() AND
          a.user_id = #{user_id.to_i} AND
          f.id IS NOT NULL
      ), node_module_nodes AS (
        SELECT
          DISTINCT p.node_module_id,
          array_agg(DISTINCT pn2.node_id) AS node_ids
        FROM
          nodes ntop
          INNER JOIN permalink_nodes pn ON pn.node_id = ntop.id
          INNER JOIN permalinks p ON p.id = pn.permalink_id
                                  AND p.node_module_id IS NOT NULL
                                  AND p.item_id IS NULL
          INNER JOIN permalink_nodes pn2 ON pn.permalink_id = pn2.permalink_id
          INNER JOIN nodes n ON n.id = pn.node_id AND n.active IS TRUE
        WHERE
          ntop.id = #{ENV['STUDY_PLAN_TOP_NODE_ID'].to_i}
        GROUP BY
          p.node_module_id
      ), node_module_hours_duration AS (
        SELECT
          nm.id AS node_module_id,
          (((sum(mv.seconds_duration) +(count(me.id) * #{ENV['MEDIUM_EXERCISE_TIME_CONSUMPTION'].to_i})
              +(count(mt.id) * #{ENV['MEDIUM_TEXT_TIME_CONSUMPTION'].to_i})) / 60::float) /
            60::float)::NUMERIC (6, 2) AS hours_duration
        FROM
          node_modules nm
          JOIN node_module_items nmi ON nmi.node_module_id = nm.id
          JOIN items i ON i.id = nmi.item_id AND i.active IS TRUE
          JOIN item_media im ON im.item_id = nmi.item_id
          LEFT JOIN media mv ON mv.id = im.medium_id AND mv.active IS TRUE
                                AND mv.medium_type::TEXT = 'video'::TEXT
          LEFT JOIN media me ON me.id = im.medium_id AND me.active IS TRUE
                                AND me.medium_type::TEXT = 'fixation_exercise'::TEXT
          LEFT JOIN media mt ON mt.id = im.medium_id AND mt.active IS TRUE
                                AND mt.medium_type::TEXT = 'text'::TEXT
        WHERE
          nm.active IS TRUE
        GROUP BY
          nm.id
      )
      SELECT
        nm.id AS node_module_id,
        nm.relevancy,
        (array #{subject_ids}::BIGINT[]::TEXT::INTEGER[] & node_ids::BIGINT[]::TEXT::INTEGER[])[1] AS subject_id,
        coalesce(node_module_hours_duration.hours_duration, 1) AS hours_duration
      FROM
        node_module_nodes
        INNER JOIN node_modules nm ON nm.id = node_module_nodes.node_module_id AND nm.active IS TRUE
        LEFT JOIN node_module_hours_duration ON node_module_hours_duration.node_module_id = nm.id
      WHERE
        relevancy < 11 AND
        array [#{subject_ids}]::BIGINT[] && node_ids::BIGINT[] AND
        node_ids &&
        (
          SELECT
            coalesce(
              (SELECT list FROM user_accesses),
              array [#{ENV['STUDY_PLAN_TOP_NODE_ID'].to_i}]
            )
        )
      ORDER BY
        relevancy,
        position
      LIMIT
        (
          SELECT
            node_modules_limit
          FROM
            user_accesses
        )
    SQL
    StudyPlanNodeModule.connection.select_all(query)
  end
  # rubocop:enable Metrics/MethodLength
end
